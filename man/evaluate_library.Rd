% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evaluate_library.R
\name{evaluate_library}
\alias{evaluate_library}
\title{evaluate_library}
\usage{
evaluate_library(
  sce,
  genes.selection,
  genes.all = rownames(sce),
  batch = NULL,
  library.size_type = "single",
  n_genes.step = 10,
  return.cell_score_stat = T,
  return.gene_score_stat = T,
  return.celltype_stat = T,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{sce}{SingleCellExperiment object containing gene counts matrix (stored in 'logcounts' assay).}

\item{genes.selection}{Character vector specifying genes to be used for the construction of Selection kNN-graph.}

\item{genes.all}{Character vector specifying genes to be used for the construction of True kNN-graph.}

\item{batch}{Name of the field in colData(sce) to specify batch. Default batch=NULL if no batch is applied.}

\item{library.size_type}{String identifying whether evaluation should be performed only on the whole inserted library (= 'single') or on a series of subsets of the library (= 'series'). Default library.size_type="single".}

\item{n_genes.step}{In case library.size_type == "series", a scalar identifying the step of the grid for library subsets. Default n_genes.step=10.}

\item{return.cell_score_stat}{Boolean identifying whether stat on cell neighborhood preservation score should be returned. Default return.cell_score_stat=TRUE.}

\item{return.gene_score_stat}{Boolean identifying whether stat on gene prediction score should be returned. Default return.gene_score_stat=TRUE.}

\item{return.celltype_stat}{Boolean identifying whether stat on celltype mapping should be returned. Default return.celltype_stat=TRUE.}

\item{verbose}{Boolean identifying whether intermediate print outputs should be returned. Default verbose=TRUE.}

\item{...}{Additional parameters}
}
\value{

}
\description{
A wrapper to return the estimates of the library quality (at cell, gene and/or celltype levels) as a function of number of genes.
}
\examples{
require(SingleCellExperiment)
n_row = 1000
n_col = 100
sce = SingleCellExperiment(assays = list(logcounts = matrix(rnorm(n_row*n_col), ncol=n_col)))
rownames(sce) = as.character(1:n_row)
colnames(sce) = c(1:n_col)
sce$cell = colnames(sce)
sce$celltype = as.character(sample.int(5, n_col, replace = TRUE))
genes.selection = sample(rownames(sce) , 20)
out = evaluate_library(sce, genes.selection)

}
