% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gene_search.R
\name{gene_search}
\alias{gene_search}
\title{Main function of the package - returns library of the selected size.}
\usage{
gene_search(
  sce,
  genes_base = NULL,
  n_genes_total,
  batch = NULL,
  n.neigh = 5,
  p.minkowski = 3,
  nPC.selection = NULL,
  nPC.all = 50,
  verbose = TRUE,
  stat_all = NULL
)
}
\arguments{
\item{sce}{SingleCellExperiment object containing gene counts matrix (stored in 'logcounts' assay).}

\item{genes_base}{Character vector specifying base genes to construct first Selection graph. Default=NULL in case no genes are supplied.}

\item{n_genes_total}{Scalar specifying total number of genes to be selected (this includes base genes).}

\item{batch}{Name of the field in colData(sce) to specify batch. Default batch=NULL if no batch is applied.}

\item{n.neigh}{Scalar specifying number of neighbors to use for kNN-graph. Default n.neigh=5.}

\item{nPC.selection}{Scalar specifying number of PCs to use for Selection Graphs. Default nPC=NULL.}

\item{nPC.all}{Scalar specifying number of PCs to use for True Graph. Default nPC.all=50.}

\item{verbose}{Boolean identifying whether intermediate print outputs should be returned. Default verbose=TRUE.}

\item{stat_all}{If True graph and corresponding Minkowski distcances have been calculated prior to search, provide this data here. Ensure that colnames = gene, dist_all. Default stat_all=NULL in case this info is not supplied.}

\item{p}{Order of Minkowski distance. Default p=3.}
}
\value{
data.frame containing selected genes and corresponding ranks. In case genes_base are supplied, rank among them will be assigned based on the order they are supplied in the corresponding string.
}
\description{
Main function of the package - returns library of the selected size.
}
\examples{
require(SingleCellExperiment)
n_row = 1000
n_col = 100
sce = SingleCellExperiment(assays = list(logcounts = matrix(rnorm(n_row*n_col), ncol=n_col)))
rownames(sce) = as.factor(1:n_row)
colnames(sce) = c(1:n_col)
sce$cell = colnames(sce)
genes = rownames(sce)
out = gene_search(sce, n_genes_total = 5)

}
